using System;
using System.Collections.Generic;
using System.Linq;
using System.Diagnostics;
namespace topart
{
    class Program
    {
        static void Main(string[] args)
        {
            Stopwatch s = new Stopwatch(); // ! stopper a méréshez
            int n = Int32.Parse(Console.ReadLine()); // mennyi föld van összesen
            s.Start();
            string[] temp60 = new string[n];
            /* { "2273 2644", "4610 3999", "304 9521", "6068 8240", "9658 2735", "3610 3613", "3107 788", "6199 3195", "1564 122", "1604 6694", "823 6516", "3910 313", "8923 8182", "7456 619", "1594 6517", "7944 8748", "6753 4557", "4174 5008", "2304 5874", "1306 9595", "170 2264", "9573 110", "2687 5111", "2556 7569", "4280 5545", "4192 6690", "2691 2150", "4641 1692", "7936 1315", "140 2604", "3083 1750", "1618 5168", "1196 2125", "1051 3649", "4843 1807", "3531 4258", "7271 1346", "2516 8329", "3048 9295", "1772 4654", "9875 4324", "5761 9665", "2767 9224", "5546 1937", "8902 2372", "1807 1546", "2206 3232", "2652 7215", "425 9804", "5042 873", "2273 2644", "4610 3999", "304 9521", "6068 8240", "9658 2735", "3610 3613", "3107 788", "6199 3195", "1564 122", "1604 6694", "823 6516", "3910 313", "8923 8182", "7456 619", "1594 6517", "7944 8748", "6753 4557", "4174 5008", "2304 5874", "1306 9595", "170 2264", "9573 110", "2687 5111", "2556 7569", "4280 5545", "4192 6690", "2691 2150", "4641 1692", "7936 1315", "140 2604", "3083 1750", "1618 5168", "1196 2125", "1051 3649", "4843 1807", "3531 4258", "7271 1346", "2516 8329", "3048 9295", "1772 4654", "9875 4324", "5761 9665", "2767 9224", "5546 1937", "8902 2372", "1807 1546", "2206 3232", "2652 7215", "425 9804", "5042 873", "2273 2644", "4610 3999", "304 9521", "6068 8240", "9658 2735", "3610 3613", "3107 788", "6199 3195", "1564 122", "1604 6694", "823 6516", "3910 313", "8923 8182", "7456 619", "1594 6517", "7944 8748", "6753 4557", "4174 5008", "2304 5874", "1306 9595", "170 2264", "9573 110", "2687 5111", "2556 7569", "4280 5545", "4192 6690", "2691 2150", "4641 1692", "7936 1315", "140 2604", "3083 1750", "1618 5168", "1196 2125", "1051 3649", "4843 1807", "3531 4258", "7271 1346", "2516 8329", "3048 9295", "1772 4654", "9875 4324", "5761 9665", "2767 9224", "5546 1937", "8902 2372", "1807 1546", "2206 3232", "2652 7215", "425 9804", "5042 873", "2273 2644", "4610 3999", "304 9521", "6068 8240", "9658 2735", "3610 3613", "3107 788", "6199 3195", "1564 122", "1604 6694", "823 6516", "3910 313", "8923 8182", "7456 619", "1594 6517", "7944 8748", "6753 4557", "4174 5008", "2304 5874", "1306 9595", "170 2264", "9573 110", "2687 5111", "2556 7569", "4280 5545", "4192 6690", "2691 2150", "4641 1692", "7936 1315", "140 2604", "3083 1750", "1618 5168", "1196 2125", "1051 3649", "4843 1807", "3531 4258", "7271 1346", "2516 8329", "3048 9295", "1772 4654", "9875 4324", "5761 9665", "2767 9224", "5546 1937", "8902 2372", "1807 1546", "2206 3232", "2652 7215", "425 9804", "5042 873", "2273 2644", "4610 3999", "304 9521", "6068 8240", "9658 2735", "3610 3613", "3107 788", "6199 3195", "1564 122", "1604 6694", "823 6516", "3910 313", "8923 8182", "7456 619", "1594 6517", "7944 8748", "6753 4557", "4174 5008", "2304 5874", "1306 9595", "170 2264", "9573 110", "2687 5111", "2556 7569", "4280 5545", "4192 6690", "2691 2150", "4641 1692", "7936 1315", "140 2604", "3083 1750", "1618 5168", "1196 2125", "1051 3649", "4843 1807", "3531 4258", "7271 1346", "2516 8329", "3048 9295", "1772 4654", "9875 4324", "5761 9665", "2767 9224", "5546 1937", "8902 2372", "1807 1546", "2206 3232", "2652 7215", "425 9804", "5042 873", "2273 2644", "4610 3999", "304 9521", "6068 8240", "9658 2735", "3610 3613", "3107 788", "6199 3195", "1564 122", "1604 6694", "823 6516", "3910 313", "8923 8182", "7456 619", "1594 6517", "7944 8748", "6753 4557", "4174 5008", "2304 5874", "1306 9595", "170 2264", "9573 110", "2687 5111", "2556 7569", "4280 5545", "4192 6690", "2691 2150", "4641 1692", "7936 1315", "140 2604", "3083 1750", "1618 5168", "1196 2125", "1051 3649", "4843 1807", "3531 4258", "7271 1346", "2516 8329", "3048 9295", "1772 4654", "9875 4324", "5761 9665", "2767 9224", "5546 1937", "8902 2372", "1807 1546", "2206 3232", "2652 7215", "425 9804", "5042 873", "2273 2644", "4610 3999", "304 9521", "6068 8240", "9658 2735", "3610 3613", "3107 788", "6199 3195", "1564 122", "1604 6694", "823 6516", "3910 313", "8923 8182", "7456 619", "1594 6517", "7944 8748", "6753 4557", "4174 5008", "2304 5874", "1306 9595", "170 2264", "9573 110", "2687 5111", "2556 7569", "4280 5545", "4192 6690", "2691 2150", "4641 1692", "7936 1315", "140 2604", "3083 1750", "1618 5168", "1196 2125", "1051 3649", "4843 1807", "3531 4258", "7271 1346", "2516 8329", "3048 9295", "1772 4654", "9875 4324", "5761 9665", "2767 9224", "5546 1937", "8902 2372", "1807 1546", "2206 3232", "2652 7215", "425 9804", "5042 873", "2273 2644", "4610 3999", "304 9521", "6068 8240", "9658 2735", "3610 3613", "3107 788", "6199 3195", "1564 122", "1604 6694", "823 6516", "3910 313", "8923 8182", "7456 619", "1594 6517", "7944 8748", "6753 4557", "4174 5008", "2304 5874", "1306 9595", "170 2264", "9573 110", "2687 5111", "2556 7569", "4280 5545", "4192 6690", "2691 2150", "4641 1692", "7936 1315", "140 2604", "3083 1750", "1618 5168", "1196 2125", "1051 3649", "4843 1807", "3531 4258", "7271 1346", "2516 8329", "3048 9295", "1772 4654", "9875 4324", "5761 9665", "2767 9224", "5546 1937", "8902 2372", "1807 1546", "2206 3232", "2652 7215", "425 9804", "5042 873", "2273 2644", "4610 3999", "304 9521", "6068 8240", "9658 2735", "3610 3613", "3107 788", "6199 3195", "1564 122", "1604 6694", "823 6516", "3910 313", "8923 8182", "7456 619", "1594 6517", "7944 8748", "6753 4557", "4174 5008", "2304 5874", "1306 9595", "170 2264", "9573 110", "2687 5111", "2556 7569", "4280 5545", "4192 6690", "2691 2150", "4641 1692", "7936 1315", "140 2604", "3083 1750", "1618 5168", "1196 2125", "1051 3649", "4843 1807", "3531 4258", "7271 1346", "2516 8329", "3048 9295", "1772 4654", "9875 4324", "5761 9665", "2767 9224", "5546 1937", "8902 2372", "1807 1546", "2206 3232", "2652 7215", "425 9804", "5042 873", "2273 2644", "4610 3999", "304 9521", "6068 8240", "9658 2735", "3610 3613", "3107 788", "6199 3195", "1564 122", "1604 6694", "823 6516", "3910 313", "8923 8182", "7456 619", "1594 6517", "7944 8748", "6753 4557", "4174 5008", "2304 5874", "1306 9595", "170 2264", "9573 110", "2687 5111", "2556 7569", "4280 5545", "4192 6690", "2691 2150", "4641 1692", "7936 1315", "140 2604", "3083 1750", "1618 5168", "1196 2125", "1051 3649", "4843 1807", "3531 4258", "7271 1346", "2516 8329", "3048 9295", "1772 4654", "9875 4324", "5761 9665", "2767 9224", "5546 1937", "8902 2372", "1807 1546", "2206 3232", "2652 7215", "425 9804", "5042 873", "2273 2644", "4610 3999", "304 9521", "6068 8240", "9658 2735", "3610 3613", "3107 788", "6199 3195", "1564 122", "1604 6694", "823 6516", "3910 313", "8923 8182", "7456 619", "1594 6517", "7944 8748", "6753 4557", "4174 5008", "2304 5874", "1306 9595", "170 2264", "9573 110", "2687 5111", "2556 7569", "4280 5545", "4192 6690", "2691 2150", "4641 1692", "7936 1315", "140 2604", "3083 1750", "1618 5168", "1196 2125", "1051 3649", "4843 1807", "3531 4258", "7271 1346", "2516 8329", "3048 9295", "1772 4654", "9875 4324", "5761 9665", "2767 9224", "5546 1937", "8902 2372", "1807 1546", "2206 3232", "2652 7215", "425 9804", "5042 873", "2273 2644", "4610 3999", "304 9521", "6068 8240", "9658 2735", "3610 3613", "3107 788", "6199 3195", "1564 122", "1604 6694", "823 6516", "3910 313", "8923 8182", "7456 619", "1594 6517", "7944 8748", "6753 4557", "4174 5008", "2304 5874", "1306 9595", "170 2264", "9573 110", "2687 5111", "2556 7569", "4280 5545", "4192 6690", "2691 2150", "4641 1692", "7936 1315", "140 2604", "3083 1750", "1618 5168", "1196 2125", "1051 3649", "4843 1807", "3531 4258", "7271 1346", "2516 8329", "3048 9295", "1772 4654", "9875 4324", "5761 9665", "2767 9224", "5546 1937", "8902 2372", "1807 1546", "2206 3232", "2652 7215", "425 9804", "5042 873" };
            */
            List<int[]> foldek = new List<int[]>(n); // földek: arr[0] = költség, arr[1] = haszon
            int[] hpf = new int[n]; // haszon per föld
            // * Input handling
            for (int i = 0; i < n; i++)
            {
                temp60[i] = Console.In.ReadLine();
            }
            for (int i = 0; i < n; i++)
            {
                string[] temp = temp60[i].Split(' ');
                foldek.Add(new int[] { Int32.Parse(temp[0]), Int32.Parse(temp[1]) });
            }
            System.Console.WriteLine("{0} ms elapsed", s.ElapsedMilliseconds);
            int osszes = 0;
            for (int i = 0; i < foldek.Count; i++)
            {
                int temp2 = foldek[i][1] - foldek[i][0];
                osszes += temp2;
                hpf[i] = temp2;
            }
            List<int[]> hasznok = new List<int[]>(); // minden eset
            // TODO: optimalizálni kell
            for (int i = 0; i < hpf.Length; i++)
            {
                for (int j = 0; j < i; j++)
                {
                    int temp3 = 0;
                    if (i > j)
                    {
                        for (int k = i; k < hpf.Length; k++)
                        {
                            temp3 += hpf[k];
                        }
                        for (int l = 0; l < j; l++)
                        {
                            temp3 += hpf[l];
                        }
                    }
                    else
                    {
                        for (int k = i; k < j; k++)
                        {
                            temp3 += hpf[k];
                        }
                    }
                    hasznok.Add(new int[] { temp3, i, j });
                    /*int temp3 = 0;
                    for (int k = i; k < j; k++)
                    {
                        temp3 += hpf[k];
                    }
                    hasznok.Add(new int[] { temp3, i, j });
                    hasznok.Add(new int[] { osszes - temp3, j, i });*/
                }
            }
            hasznok = hasznok.OrderByDescending(x => x[0]).ToList();
            System.Console.WriteLine(hasznok[0][0]);
            System.Console.WriteLine("{0} {1}", (hasznok[0][1] + 1).ToString(), hasznok[0][2]);
            //! stopper kiíratása
            s.Stop();
            System.Console.WriteLine("{0} ms elapsed", s.ElapsedMilliseconds);
        }
    }
}